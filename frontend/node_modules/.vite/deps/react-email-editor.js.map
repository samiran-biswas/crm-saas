{
  "version": 3,
  "sources": ["../../react-email-editor/src/loadScript.ts", "../../react-email-editor/src/EmailEditor.tsx", "../../react-email-editor/dist/index.js"],
  "sourcesContent": ["const defaultScriptUrl = 'https://editor.unlayer.com/embed.js?2';\nconst callbacks: Function[] = [];\nlet loaded = false;\n\nconst isScriptInjected = (scriptUrl: string) => {\n  const scripts = document.querySelectorAll('script');\n  let injected = false;\n\n  scripts.forEach((script) => {\n    if (script.src.includes(scriptUrl)) {\n      injected = true;\n    }\n  });\n\n  return injected;\n};\n\nconst addCallback = (callback: Function) => {\n  callbacks.push(callback);\n};\n\nconst runCallbacks = () => {\n  if (loaded) {\n    let callback;\n\n    while ((callback = callbacks.shift())) {\n      callback();\n    }\n  }\n};\n\nexport const loadScript = (\n  callback: Function,\n  scriptUrl = defaultScriptUrl\n) => {\n  addCallback(callback);\n\n  if (!isScriptInjected(scriptUrl)) {\n    const embedScript = document.createElement('script');\n    embedScript.setAttribute('src', scriptUrl);\n    embedScript.onload = () => {\n      loaded = true;\n      runCallbacks();\n    };\n    document.head.appendChild(embedScript);\n  } else {\n    runCallbacks();\n  }\n};\n", "import React, {\n  useEffect,\n  useState,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\n\nimport pkg from '../package.json';\nimport { Editor, EditorRef, EmailEditorProps } from './types';\nimport { loadScript } from './loadScript';\n\nconst win = typeof window === 'undefined' ? { __unlayer_lastEditorId: 0 } : window\nwin.__unlayer_lastEditorId = win.__unlayer_lastEditorId || 0;\n\nexport const EmailEditor = React.forwardRef<EditorRef, EmailEditorProps>(\n  (props, ref) => {\n    const { onLoad, onReady, scriptUrl, minHeight = 500, style = {} } = props;\n\n    const [editor, setEditor] = useState<Editor | null>(null);\n\n    const [hasLoadedEmbedScript, setHasLoadedEmbedScript] = useState(false);\n\n    const editorId = useMemo(\n      () => props.editorId || `editor-${++win.__unlayer_lastEditorId}`,\n      [props.editorId]\n    );\n\n    const options: EmailEditorProps['options'] = {\n      ...(props.options || {}),\n      appearance: props.appearance ?? props.options?.appearance,\n      displayMode: props?.displayMode || props.options?.displayMode || 'email',\n      locale: props.locale ?? props.options?.locale,\n      projectId: props.projectId ?? props.options?.projectId,\n      tools: props.tools ?? props.options?.tools,\n\n      id: editorId,\n      source: {\n        name: pkg.name,\n        version: pkg.version,\n      },\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        editor,\n      }),\n      [editor]\n    );\n\n    useEffect(() => {\n      return () => {\n        editor?.destroy();\n      };\n    }, []);\n\n    useEffect(() => {\n      setHasLoadedEmbedScript(false);\n      loadScript(() => setHasLoadedEmbedScript(true), scriptUrl);\n    }, [scriptUrl]);\n\n    useEffect(() => {\n      if (!hasLoadedEmbedScript) return;\n      editor?.destroy();\n      setEditor(unlayer.createEditor(options));\n    }, [JSON.stringify(options), hasLoadedEmbedScript]);\n\n    const methodProps = Object.keys(props).filter((propName) =>\n      /^on/.test(propName)\n    );\n    useEffect(() => {\n      if (!editor) return;\n\n      onLoad?.(editor);\n\n      // All properties starting with on[Name] are registered as event listeners.\n      methodProps.forEach((methodProp) => {\n        if (\n          /^on/.test(methodProp) &&\n          methodProp !== 'onLoad' &&\n          methodProp !== 'onReady' &&\n          typeof props[methodProp] === 'function'\n        ) {\n          editor.addEventListener(methodProp, props[methodProp]);\n        }\n      });\n\n      if (onReady) {\n        editor.addEventListener('editor:ready', () => {\n          onReady(editor);\n        });\n      }\n    }, [editor, Object.keys(methodProps).join(',')]);\n\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          minHeight: minHeight,\n        }}\n      >\n        <div id={editorId} style={{ ...style, flex: 1 }} />\n      </div>\n    );\n  }\n);\n", "\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./react-email-editor.cjs.production.min.js')\n} else {\n  module.exports = require('./react-email-editor.cjs.development.js')\n}\n"],
  "mappings": "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",
  "names": ["defaultScriptUrl", "callbacks", "loaded", "isScriptInjected", "scriptUrl", "scripts", "document", "querySelectorAll", "injected", "forEach", "script", "src", "includes", "addCallback", "callback", "push", "runCallbacks", "shift", "loadScript", "embedScript", "createElement", "setAttribute", "onload", "head", "appendChild", "win", "window", "__unlayer_lastEditorId", "EmailEditor", "React", "forwardRef", "props", "ref", "onLoad", "onReady", "minHeight", "style", "useState", "editor", "setEditor", "hasLoadedEmbedScript", "setHasLoadedEmbedScript", "editorId", "useMemo", "options", "appearance", "displayMode", "locale", "projectId", "tools", "id", "source", "name", "pkg", "version", "useImperativeHandle", "useEffect", "destroy", "unlayer", "createEditor", "JSON", "stringify", "methodProps", "Object", "keys", "filter", "propName", "test", "methodProp", "addEventListener", "join", "flex", "display"]
}
